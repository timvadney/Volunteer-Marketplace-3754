Index: src/main/java/edu/vt/EntityBeans/UserEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.vt.EntityBeans;\r\n\r\npublic class UserEvent {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/EntityBeans/UserEvent.java b/src/main/java/edu/vt/EntityBeans/UserEvent.java
--- a/src/main/java/edu/vt/EntityBeans/UserEvent.java	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/java/edu/vt/EntityBeans/UserEvent.java	(date 1714540510168)
@@ -1,4 +1,250 @@
 package edu.vt.EntityBeans;
 
-public class UserEvent {
+import edu.vt.globals.Methods;
+import jakarta.persistence.*;
+import jakarta.validation.constraints.NotNull;
+import jakarta.validation.constraints.Size;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/*
+The @Entity annotation designates this class as a Jakarta Persistence Entity POJO class
+representing the Country table in the CountriesDB database.
+ */
+@Entity
+
+// Name of the database table represented
+@Table(name = "UserEvent")
+
+@NamedQueries({
+        // This named query is used in CountryFacade
+        @NamedQuery(name = "UserEvent.findByName", query = "SELECT u FROM UserEvent u WHERE u.title = :title")
+})
+public class UserEvent implements Serializable {
+    private static final long serialVersionUID = 1L;
+    /*
+    Primary Key id is auto generated by the system as an Integer value
+    starting with 1 and incremented by 1, i.e., 1,2,3,...
+    A deleted entity object's primary key number is not reused.
+     */
+    // id INT UNSIGNED NOT NULL AUTO_INCREMENT
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "id")
+    private Integer id;
+
+    // Event's title
+    // name VARCHAR(128) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 128)
+    @Column(name = "name")
+    private String title;
+
+    // Events's associated organization
+    // organization VARCHAR(128) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 128)
+    @Column(name = "organization")
+    private String organization;
+
+    // Events's description
+    // description VARCHAR(512) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 512)
+    @Column(name = "description")
+    private String description;
+
+    // Charity's logo url
+    // logo_url VARCHAR(2048) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 2048)
+    @Column(name = "image_url")
+    private String imageUrl;
+
+    // Event's website url
+    // website_url VARCHAR(2048) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 2048)
+    @Column(name = "website_url")
+    private String websiteUrl;
+
+    // Event's address line 1
+    // address1 VARCHAR(128) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 128)
+    @Column(name = "address1")
+    private String address1;
+
+    // Event's address line 2
+    // address2 VARCHAR(128) NOT NULL
+    @Column(name = "address2")
+    private String address2;
+
+    // Event's city
+    // city VARCHAR(64) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Column(name = "city")
+    private String city;
+
+    // Event's state
+    // state VARCHAR(64) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Column(name = "state")
+    private String state;
+
+    // Event's zip code
+    // zip_code VARCHAR(32) NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Column(name = "zip_code")
+    private String zipCode;
+
+    // Event's date
+    // state date NOT NULL
+    @Basic(optional = false)
+    @NotNull
+    @Column(name = "date")
+    @Temporal(TemporalType.DATE)
+    private Date date;
+
+    // user_id INT UNSIGNED NOT NULL
+    @JoinColumn(name = "user_id", referencedColumnName = "id")
+    @ManyToOne
+    private User userId;
+
+
+    /*
+    =================================================================
+    Class constructors for instantiating a Charity entity object to
+    represent a row in the Charity table in the VolunteerMarketplaceDB database.
+    =================================================================
+     */
+    // Used in PrepareCreate method in CountryController
+    public UserEvent() {
+    }
+
+    /*
+    ======================================================
+    Getter and Setter methods for the attributes (columns)
+    of the Country table in the CountriesDB database.
+    ======================================================
+     */
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getOrganization() {
+        return organization;
+    }
+
+    public void setOrganization(String organization) {
+        this.organization = organization;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getImageUrl() {
+        return imageUrl;
+    }
+
+    public void setImageUrl(String imageUrl) {
+        this.imageUrl = imageUrl;
+    }
+
+    public String getWebsiteUrl() {
+        return websiteUrl;
+    }
+
+    public void setWebsiteUrl(String websiteUrl) {
+        this.websiteUrl = websiteUrl;
+    }
+
+    public String getAddress1() {
+        return address1;
+    }
+
+    public void setAddress1(String address1) {
+        this.address1 = address1;
+    }
+
+    public String getAddress2() {
+        return address2;
+    }
+
+    public void setAddress2(String address2) {
+        this.address2 = address2;
+    }
+
+    public String getCity() {
+        return city;
+    }
+
+    public void setCity(String city) {
+        this.city = city;
+    }
+
+    public String getState() {
+        return state;
+    }
+
+    public void setState(String state) {
+        this.state = state;
+    }
+
+    public String getZipCode() {
+        return zipCode;
+    }
+
+    public void setZipCode(String zipCode) {
+        this.zipCode = zipCode;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+
+    public User getUserId() {
+        return userId;
+    }
+
+    public void setUserId(User userId) {
+        this.userId = userId;
+    }
+
+    public String getLocation() {
+        return Methods.addressFormatter(address1, address2, "", city, state, zipCode, "");
+    }
 }
Index: src/main/java/edu/vt/controllers/PopularEventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Created by Osman Balci and Tim Vadney on 2024.3.18\r\n * Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.\r\n */\r\npackage edu.vt.controllers;\r\n\r\nimport edu.vt.EntityBeans.PopularEvent;\r\nimport edu.vt.FacadeBeans.PopularEventFacade;\r\nimport edu.vt.controllers.util.JsfUtil;\r\nimport edu.vt.controllers.util.JsfUtil.PersistAction;\r\nimport edu.vt.globals.Constants;\r\nimport edu.vt.globals.Methods;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\nimport jakarta.ejb.EJB;\r\nimport jakarta.ejb.EJBException;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.inject.Named;\r\nimport jakarta.enterprise.context.SessionScoped;\r\n\r\n/*\r\n---------------------------------------------------------------------------\r\nThe @Named (jakarta.inject.Named) annotation indicates that the objects\r\ninstantiated from this class will be managed by the Contexts and Dependency\r\nInjection (CDI) container. The name \"publicFavoriteController\" is used within\r\nExpression Language (EL) expressions in Jakarta Faces (XHTML) facelets pages to\r\naccess the properties and invoke methods of this class.\r\n---------------------------------------------------------------------------\r\n */\r\n@Named(\"popularEventController\")\r\n\r\n/*\r\nThe @SessionScoped annotation preserves the values of the PublicFavoriteController\r\nobject's instance variables across multiple HTTP request-response cycles\r\nas long as the user's established HTTP session is alive.\r\n */\r\n@SessionScoped\r\n\r\n/*\r\n-----------------------------------------------------------------------------\r\nMarking the PublicFavoriteController class as \"implements Serializable\" implies that\r\ninstances of the class can be automatically serialized and deserialized.\r\n\r\nSerialization is the process of converting a class instance (object)\r\nfrom memory into a suitable format for storage in a file or memory buffer,\r\nor for transmission across a network connection link.\r\n\r\nDeserialization is the process of recreating a class instance (object)\r\nin memory from the format under which it was stored.\r\n-----------------------------------------------------------------------------\r\n */\r\npublic class PopularEventController implements Serializable {\r\n    /*\r\n    ===============================\r\n    Instance Variables (Properties)\r\n    ===============================\r\n    */\r\n\r\n    /*\r\n    The @EJB annotation directs the EJB Container Manager to inject (store) the object reference of the\r\n    PublicFavoriteFacade bean into the instance variable 'publicFavoriteFacade' after it is instantiated at runtime.\r\n     */\r\n    @EJB\r\n    private PopularEventFacade popularEventFacade;\r\n//    @Inject\r\n//    private UserFavoriteController userFavoriteController;\r\n    @Inject\r\n    private UserController userController;\r\n\r\n    // List of object references of public favoriet objects\r\n    private List<PopularEvent> listOfPopularEvents = null;\r\n\r\n    // selected = object reference of a selected public favorite object\r\n    private PopularEvent selected;\r\n\r\n    // Flag indicating if public favorite data changed or not\r\n    private Boolean popularEventDataChanged;\r\n\r\n    // searchItems = List of object references of public favorite objects found in the search\r\n    private List<PopularEvent> searchItems = null;\r\n\r\n    // searchCategory implies what field of a public favorite will be searched through\r\n    private String searchCategory;\r\n\r\n    // searchString contains the character string the user entered for searching the selected searchCategory\r\n    private String searchString;\r\n\r\n    // Search type from 1 to 5\r\n    private Integer searchType;\r\n\r\n    // Search Query Variables (Q = Query)\r\n\r\n\r\n\r\n\r\n    /*\r\n    =========================\r\n    Getter and Setter Methods\r\n    =========================\r\n     */\r\n    public List<PopularEvent> getListOfPopularEvents() {\r\n        if (listOfPopularEvents == null) {\r\n            listOfPopularEvents = popularEventFacade.findAll();\r\n\r\n            // Sort the List of PublicFavorite objects with respect to nameCommon property in alphabetical order\r\n            listOfPopularEvents.sort(Comparator.comparing(PopularEvent::getTitle));\r\n        }\r\n        return listOfPopularEvents;\r\n    }\r\n\r\n    public String getSearchCategory() {\r\n        return searchCategory;\r\n    }\r\n\r\n    public void setSearchCategory(String searchCategory) {\r\n        this.searchCategory = searchCategory;\r\n    }\r\n\r\n    public String getSearchString() {\r\n        return searchString;\r\n    }\r\n\r\n    public void setSearchString(String searchString) {\r\n        this.searchString = searchString;\r\n    }\r\n\r\n    public PopularEventFacade getPopularEventFacade() {\r\n        return popularEventFacade;\r\n    }\r\n\r\n    public void setPopularEventFacade(PopularEventFacade popularEventFacade) {\r\n        this.popularEventFacade = popularEventFacade;\r\n    }\r\n\r\n    public UserController getUserController() {\r\n        return userController;\r\n    }\r\n\r\n    public void setUserController(UserController userController) {\r\n        this.userController = userController;\r\n    }\r\n\r\n    public void setListOfPopularEvents(List<PopularEvent> listOfPopularEvents) {\r\n        this.listOfPopularEvents = listOfPopularEvents;\r\n    }\r\n\r\n    public PopularEvent getSelected() {\r\n        return selected;\r\n    }\r\n\r\n    public void setSelected(PopularEvent selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    public Boolean getPopularEventDataChanged() {\r\n        return popularEventDataChanged;\r\n    }\r\n\r\n    public void setPopularEventDataChanged(Boolean popularEventDataChanged) {\r\n        this.popularEventDataChanged = popularEventDataChanged;\r\n    }\r\n\r\n    public List<PopularEvent> getSearchItems() {\r\n        return searchItems;\r\n    }\r\n\r\n    public void setSearchItems(List<PopularEvent> searchItems) {\r\n        this.searchItems = searchItems;\r\n    }\r\n\r\n    public Integer getSearchType() {\r\n        return searchType;\r\n    }\r\n\r\n    public void setSearchType(Integer searchType) {\r\n        this.searchType = searchType;\r\n    }\r\n\r\n    /*\r\n     *****************************\r\n     *   Return Google API Key   *\r\n     *****************************\r\n     */\r\n    public String googleApiKey() {\r\n        return Constants.GOOGLE_API_KEY;\r\n    }\r\n\r\n    /*\r\n     ***************************************\r\n     *   Prepare to Create a New Public Favorite   *\r\n     ***************************************\r\n     */\r\n    public PopularEvent prepareCreate() {\r\n        /*\r\n        Instantiate a new PublicFavorite object and store its object reference into\r\n        instance variable 'selected'. The PublicFavorite class is defined in PublicFavorite.java\r\n         */\r\n        selected = new PopularEvent();\r\n        return selected;\r\n    }\r\n\r\n\r\n    /*\r\n     ********************************************\r\n     *   CREATE a New Public Favorite in the Database   *\r\n     ********************************************\r\n     */\r\n    public void create() {\r\n        Methods.preserveMessages();\r\n        /*\r\n        An enum is a special Java type used to define a group of constants.\r\n        The constants CREATE, DELETE and UPDATE are defined as follows in JsfUtil.java\r\n\r\n                public enum PersistAction {\r\n                    CREATE,\r\n                    DELETE,\r\n                    UPDATE\r\n                }\r\n         */\r\n\r\n        /*\r\n         The object reference of the public favorite to be created is stored in the instance variable 'selected'\r\n         See the persist method below.\r\n         */\r\n        persist(PersistAction.CREATE, \"New public favorite business is Successfully Created!\");\r\n\r\n        if (!JsfUtil.isValidationFailed()) {\r\n            // No Jakarta Faces validation error. The CREATE operation is successfully performed.\r\n            selected = null;            // Remove selection\r\n            listOfPopularEvents = null;     // Invalidate listOfPublicFavorites to trigger re-query.\r\n            popularEventDataChanged = true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     ***********************************************\r\n     *   UPDATE Selected Public Favorite in the Database   *\r\n     ***********************************************\r\n     */\r\n    public void update() {\r\n        Methods.preserveMessages();\r\n        /*\r\n         The object reference of the public favorite to be updated is stored in the instance variable 'selected'\r\n         See the persist method below.\r\n         */\r\n        persist(PersistAction.UPDATE, \"Public Favorite Business was Successfully Updated!\");\r\n\r\n        if (!JsfUtil.isValidationFailed()) {\r\n            // No Jakarta Faces validation error. The UPDATE operation is successfully performed.\r\n            selected = null;        // Remove selection\r\n            listOfPopularEvents = null; // Invalidate listOfPublicFavorites to trigger re-query.\r\n            popularEventDataChanged = true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     *************************************\r\n     *   Cancel and Display List.xhtml   *\r\n     *************************************\r\n     */\r\n    public String cancel() {\r\n        // Unselect previously selected movie object if any\r\n        selected = null;\r\n        return \"/publicFavorite/List?faces-redirect=true\";\r\n    }\r\n\r\n    /*\r\n     ****************************************\r\n     *   Unselect Selected Public Favorite Object   *\r\n     ****************************************\r\n     */\r\n    public void unselect() {\r\n        selected = null;\r\n    }\r\n\r\n    /*\r\n     *************************************************\r\n     *   DELETE Selected Public Favorite from the Database   *\r\n     *************************************************\r\n     */\r\n    public void destroy() {\r\n        /*\r\n         The object reference of the public favorite to be deleted is stored in the instance variable 'selected'\r\n         See the persist method below.\r\n         */\r\n        persist(PersistAction.DELETE, \"Public favorite business is Successfully Deleted!\");\r\n\r\n        if (!JsfUtil.isValidationFailed()) {\r\n            // No Jakarta Faces validation error. The DELETE operation is successfully performed.\r\n            selected = null;            // Remove selection\r\n            listOfPopularEvents = null;     // Invalidate list of public favorites to trigger re-query.\r\n            popularEventDataChanged = true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     **********************************************************************************************\r\n     *   Perform CREATE, UPDATE (EDIT), and DELETE (DESTROY, REMOVE) Operations in the Database   *\r\n     **********************************************************************************************\r\n     */\r\n\r\n    /**\r\n     * @param persistAction  refers to CREATE, UPDATE (Edit) or DELETE action\r\n     * @param successMessage displayed to inform the user about the result\r\n     */\r\n    private void persist(PersistAction persistAction, String successMessage) {\r\n        if (selected != null) {\r\n            try {\r\n                if (persistAction != PersistAction.DELETE) {\r\n                    /*\r\n                     -------------------------------------------------\r\n                     Perform CREATE or EDIT operation in the database.\r\n                     -------------------------------------------------\r\n                     The edit(selected) method performs the SAVE (STORE) operation of the \"selected\"\r\n                     object in the database regardless of whether the object is a newly\r\n                     created object (CREATE) or an edited (updated) object (EDIT or UPDATE).\r\n\r\n                     PublicFavoriteFacade inherits the edit(selected) method from the AbstractFacade class.\r\n                     */\r\n                    popularEventFacade.edit(selected);\r\n                } else {\r\n                    /*\r\n                     -----------------------------------------\r\n                     Perform DELETE operation in the database.\r\n                     -----------------------------------------\r\n                     The remove(selected) method performs the DELETE operation of the \"selected\"\r\n                     object in the database.\r\n\r\n                     PublicFavoriteFacade inherits the remove(selected) method from the AbstractFacade class.\r\n                     */\r\n                    popularEventFacade.remove(selected);\r\n                }\r\n                JsfUtil.addSuccessMessage(successMessage);\r\n            } catch (EJBException ex) {\r\n                String msg = \"\";\r\n                Throwable cause = ex.getCause();\r\n                if (cause != null) {\r\n                    msg = cause.getLocalizedMessage();\r\n                }\r\n                if (msg.length() > 0) {\r\n                    JsfUtil.addErrorMessage(msg);\r\n                } else {\r\n                    JsfUtil.addErrorMessage(ex, \"A persistence error occurred!\");\r\n                }\r\n            } catch (Exception ex) {\r\n                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);\r\n                JsfUtil.addErrorMessage(ex, \"A persistence error occurred\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     *****************************************\r\n     *   Display the Search Results JF Page  *\r\n     *****************************************\r\n     */\r\n    public String search(Integer type) {\r\n        // Set search type given as input parameter\r\n        searchType = type;\r\n\r\n        // Unselect previously selected public favorite if any before showing the search results\r\n        selected = null;\r\n\r\n        // Invalidate list of search items to trigger re-query.\r\n        searchItems = null;\r\n\r\n        return \"/databaseSearch/DatabaseSearchResults?faces-redirect=true\";\r\n    }\r\n\r\n    /*\r\n     ****************************************************************************************************\r\n     *   Return the list of object references of all those public favorites that satisfy the search criteria   *\r\n     ****************************************************************************************************\r\n     */\r\n    // This is the Getter method for the instance variable searchItems\r\n//    public List<PublicFavorite> getSearchItems() {\r\n//        /*\r\n//        =============================================================================================\r\n//        You must construct and return the search results List \"searchItems\" ONLY IF the List is null.\r\n//        Any List provided to p:dataTable to display must be returned ONLY IF the List is null\r\n//        ===> in order for the column-sort to work. <===\r\n//        =============================================================================================\r\n//         */\r\n//        if (searchItems == null) {\r\n//            switch (searchType) {\r\n//                case 1: // Search Type 1\r\n//                    switch (searchCategory) {\r\n//                        case \"Name\":\r\n//                            // Return the list of object references of all those businesses where\r\n//                            // business name contains the searchString entered by the user.\r\n//                            searchItems = publicFavoriteFacade.nameQuery(searchString);\r\n//                            break;\r\n//                        case \"Address\":\r\n//                            // Return the list of object references of all those businesses where\r\n//                            // address1 contains the searchString entered by the user.\r\n//                            searchItems = publicFavoriteFacade.addressQuery(searchString);\r\n//                            break;\r\n//                        case \"City\":\r\n//                            // Return the list of object references of all those businesses where\r\n//                            // city contains the searchString entered by the user.\r\n//                            searchItems = publicFavoriteFacade.cityQuery(searchString);\r\n//                            break;\r\n//                        default:\r\n//                            // Return the list of object references of all those businesses where business name OR\r\n//                            // address1 OR city contains the searchString entered by the user.\r\n//                            searchItems = publicFavoriteFacade.allQuery(searchString);\r\n//                    }\r\n//                    break;\r\n//                case 2: // Search Type 2\r\n//                    // Business name contains nameQ AND rating â¥ ratingQ\r\n//                    searchItems = publicFavoriteFacade.type2SearchQuery(nameQ, ratingQ);\r\n//                    break;\r\n//                case 3: // Search Type 3\r\n//                    // Business rating â¥ ratingQ AND reviewCount â¥ reviewCountQ\r\n//                    searchItems = publicFavoriteFacade.type3SearchQuery(ratingQ, reviewCountQ);\r\n//                    break;\r\n//                case 4: // Search Type 4\r\n//                    // City name contains cityQ AND rating â¥ ratingQ AND reviewCount â¥ reviewCountQ\r\n//                    searchItems = publicFavoriteFacade.type4SearchQuery(cityQ, ratingQ, reviewCountQ);\r\n//                    break;\r\n//                default:\r\n//                    Methods.showMessage(\"Fatal Error\", \"Search Type is Out of Range!\",\r\n//                            \"\");\r\n//            }\r\n//        }\r\n//        searchItems.sort(Comparator.comparing(PublicFavorite::getName));\r\n//        return searchItems;\r\n//    }\r\n\r\n    // Adds the Public Favorite to User Favorites if possible\r\n//    public void addToUserFavorites()\r\n//    {\r\n//        Methods.preserveMessages();\r\n//\r\n//        if (!userController.userIsSignedIn())\r\n//        {\r\n//            Methods.showMessage(\"Information\", \"Unable to Share!\",\r\n//                    \"To share a business, a user must have signed in!\");\r\n//        }\r\n//        else {\r\n//            UserFavorite newUserFavorite = userFavoriteController.prepareCreate();\r\n//\r\n//            newUserFavorite.setName(selected.getName());\r\n//            newUserFavorite.setImage(selected.getImage());\r\n//            newUserFavorite.setRating(selected.getRating());\r\n//            newUserFavorite.setReview_count(selected.getReview_count());\r\n//            newUserFavorite.setPhone(selected.getPhone());\r\n//            newUserFavorite.setWebsite(selected.getWebsite());\r\n//            newUserFavorite.setAddress1(selected.getAddress1());\r\n//            newUserFavorite.setAddress2(selected.getAddress2());\r\n//            newUserFavorite.setAddress3(selected.getAddress3());\r\n//            newUserFavorite.setCity(selected.getCity());\r\n//            newUserFavorite.setState(selected.getState());\r\n//            newUserFavorite.setZip_code(selected.getZip_code());\r\n//            newUserFavorite.setCountry(selected.getCountry());\r\n//            newUserFavorite.setLatitude(selected.getLatitude());\r\n//            newUserFavorite.setLongitude(selected.getLongitude());\r\n//\r\n//            userFavoriteController.create();\r\n//        }\r\n//    }\r\n//\r\n//    // Formats address to be displayed in list\r\n//    public String businessAddress(PublicFavorite aBusiness) {\r\n//        return Methods.addressFormatter(aBusiness.getAddress1(), aBusiness.getAddress2(), aBusiness.getAddress3(),\r\n//                aBusiness.getCity(), aBusiness.getState(), aBusiness.getZip_code(), aBusiness.getCountry());\r\n//    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/controllers/PopularEventController.java b/src/main/java/edu/vt/controllers/PopularEventController.java
--- a/src/main/java/edu/vt/controllers/PopularEventController.java	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/java/edu/vt/controllers/PopularEventController.java	(date 1714544465606)
@@ -4,8 +4,11 @@
  */
 package edu.vt.controllers;
 
+import edu.vt.EntityBeans.Charity;
 import edu.vt.EntityBeans.PopularEvent;
+import edu.vt.EntityBeans.UserEvent;
 import edu.vt.FacadeBeans.PopularEventFacade;
+import edu.vt.FacadeBeans.UserEventFacade;
 import edu.vt.controllers.util.JsfUtil;
 import edu.vt.controllers.util.JsfUtil.PersistAction;
 import edu.vt.globals.Constants;
@@ -67,8 +70,10 @@
      */
     @EJB
     private PopularEventFacade popularEventFacade;
-//    @Inject
-//    private UserFavoriteController userFavoriteController;
+    @EJB
+    private UserEventFacade userEventFacade;
+    @Inject
+    private UserEventController userEventController;
     @Inject
     private UserController userController;
 
@@ -372,6 +377,50 @@
         return "/databaseSearch/DatabaseSearchResults?faces-redirect=true";
     }
 
+    public String addToFavorites()
+    {
+        // Check to see if the cocktail to be added is already in the database
+        Methods.preserveMessages();
+        if (!userController.userIsSignedIn()) {
+            Methods.showMessage("Information", "Unable to Donate!",
+                    "To donate, a user must have signed in!");
+            return "/popularEvents/List?faces-redirect=true";
+        }
+        else
+        {
+            // Obtain the selected cocktails's common name from the API search results list
+            String nameQuery = selected.getTitle();
+
+            // Check to see if there is a cocktail by that name in the favorites database
+            UserEvent foundEvent = userEventFacade.findByName(nameQuery);
+
+            if (foundEvent != null) {
+                // The cocktail to be added already exists in the database
+                Methods.showMessage("Information", "Event already exists!",
+                        "You have already signed up for this event!");
+                return "/popularEvents/List?faces-redirect=true";
+            }
+
+            UserEvent newEvent = userEventController.prepareCreate();
+
+            newEvent.setTitle(selected.getTitle());
+            newEvent.setOrganization(selected.getOrganization());
+            newEvent.setDescription(selected.getDescription());
+            newEvent.setImageUrl(selected.getImageUrl());
+            newEvent.setWebsiteUrl(selected.getWebsiteUrl());
+            newEvent.setAddress1(selected.getAddress1());
+            newEvent.setAddress2(selected.getAddress2());
+            newEvent.setCity(selected.getCity());
+            newEvent.setState(selected.getState());
+            newEvent.setZipCode(selected.getZipCode());
+            newEvent.setDate(selected.getDate());
+
+            userEventController.create();
+
+            return "/userCharities/List?faces-redirect=true";
+        }
+    }
+
     /*
      ****************************************************************************************************
      *   Return the list of object references of all those public favorites that satisfy the search criteria   *
Index: src/main/java/edu/vt/FacadeBeans/PopularEventFacade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Created by Osman Balci and Tim Vadney on 2024.3.30\r\n * Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.\r\n */\r\npackage edu.vt.FacadeBeans;\r\n\r\nimport edu.vt.EntityBeans.PopularEvent;\r\nimport jakarta.ejb.Stateless;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.PersistenceContext;\r\n\r\nimport java.util.List;\r\n\r\n// @Stateless annotation implies that the conversational state with the client shall NOT be maintained.\r\n@Stateless\r\npublic class PopularEventFacade extends AbstractFacade<PopularEvent> {\r\n    /*\r\n    ---------------------------------------------------------------------------------------------\r\n    The EntityManager is an API that enables database CRUD (Create Read Update Delete) operations\r\n    and complex database searches. An EntityManager instance is created to manage entities\r\n    that are defined by a persistence unit. The @PersistenceContext annotation below associates\r\n    the entityManager instance with the persistence unitName identified below.\r\n    ---------------------------------------------------------------------------------------------\r\n     */\r\n    @PersistenceContext(unitName = \"VolunteerMarketplacePU\")\r\n    private EntityManager entityManager;\r\n\r\n    // Obtain the object reference of the EntityManager instance in charge of\r\n    // managing the entities in the persistence context identified above.\r\n    @Override\r\n    protected EntityManager getEntityManager() {\r\n        return entityManager;\r\n    }\r\n\r\n    /*\r\n    This constructor method invokes its parent AbstractFacade's constructor method,\r\n    which in turn initializes its entity class type T and entityClass instance variable.\r\n     */\r\n    public PopularEventFacade() {\r\n        super(PopularEvent.class);\r\n    }\r\n\r\n//    /*\r\n//     ***************************\r\n//     *   Search Query Type 1   *\r\n//     ***************************\r\n//     */\r\n//\r\n//    /*\r\n//    -----------------------------\r\n//    Search Category: Business NAME\r\n//    -----------------------------\r\n//     */\r\n//    // Searches BusinessesDB for businesses where Business name contains the searchString entered by the user.\r\n//    public List<PublicFavorite> nameQuery(String searchString) {\r\n//        searchString = \"%\" + searchString + \"%\";\r\n//        // Conduct the search in a case-insensitive manner and return the results in a list.\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.name LIKE :searchString\")\r\n//                .setParameter(\"searchString\", searchString)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//    -----------------------------\r\n//    Search Category: Business Address\r\n//    -----------------------------\r\n//     */\r\n//    // Searches BusinessesDB for businesses where Business address1 contains the searchString entered by the user.\r\n//    public List<PublicFavorite> addressQuery(String searchString) {\r\n//        searchString = \"%\" + searchString + \"%\";\r\n//        // Conduct the search in a case-insensitive manner and return the results in a list.\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.address1 LIKE :searchString\")\r\n//                .setParameter(\"searchString\", searchString)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//    -----------------------------\r\n//    Search Category: Business City\r\n//    -----------------------------\r\n//     */\r\n//    // Searches BusinessesDB for businesses where Business city contains the searchString entered by the user.\r\n//    public List<PublicFavorite> cityQuery(String searchString) {\r\n//        searchString = \"%\" + searchString + \"%\";\r\n//        // Conduct the search in a case-insensitive manner and return the results in a list.\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.city LIKE :searchString\")\r\n//                .setParameter(\"searchString\", searchString)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//    --------------------\r\n//    Search Category: ALL\r\n//    --------------------\r\n//     */\r\n//    // Searches BusinessesDB for businesses where Business name OR address1 OR city contains the searchString entered by the user.\r\n//    public List<PublicFavorite> allQuery(String searchString) {\r\n//        searchString = \"%\" + searchString + \"%\";\r\n//        // Conduct the search in a case-insensitive manner and return the results in a list.\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.name LIKE :searchString OR p.address1 LIKE :searchString OR p.city LIKE :searchString\")\r\n//                .setParameter(\"searchString\", searchString)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//     ***************************\r\n//     *   Search Query Type 2   *\r\n//     ***************************\r\n//     */\r\n//    // Business name contains nameQ AND rating â¥ ratingQ\r\n//    public List<PublicFavorite> type2SearchQuery(String nameQ, Double ratingQ) {\r\n//\r\n//        nameQ = \"%\" + nameQ + \"%\";\r\n//\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.name LIKE :nameQ AND p.rating >= :ratingQ\")\r\n//                .setParameter(\"nameQ\", nameQ)\r\n//                .setParameter(\"ratingQ\", ratingQ)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//     ***************************\r\n//     *   Search Query Type 3   *\r\n//     ***************************\r\n//     */\r\n//    // Business rating â¥ ratingQ AND reviewCount â¥ reviewCountQ\r\n//    public List<PublicFavorite> type3SearchQuery(Double ratingQ, int reviewCountQ) {\r\n//\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.rating >= :ratingQ AND p.review_count >= :reviewCountQ\")\r\n//                .setParameter(\"ratingQ\", ratingQ)\r\n//                .setParameter(\"reviewCountQ\", reviewCountQ)\r\n//                .getResultList();\r\n//    }\r\n//\r\n//    /*\r\n//     ***************************\r\n//     *   Search Query Type 4   *\r\n//     ***************************\r\n//     */\r\n//    // City name contains cityQ AND rating â¥ ratingQ AND reviewCount â¥ reviewCountQ\r\n//    public List<PublicFavorite> type4SearchQuery(String cityQ, Double ratingQ, int reviewCountQ) {\r\n//\r\n//        cityQ = \"%\" + cityQ + \"%\";\r\n//\r\n//        return getEntityManager().createQuery(\r\n//                        \"SELECT p FROM PublicFavorite p WHERE p.city LIKE :cityQ AND p.rating >= :ratingQ AND p.review_count >= :reviewCountQ\")\r\n//                .setParameter(\"cityQ\", cityQ)\r\n//                .setParameter(\"ratingQ\", ratingQ)\r\n//                .setParameter(\"reviewCountQ\", reviewCountQ)\r\n//                .getResultList();\r\n//    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/FacadeBeans/PopularEventFacade.java b/src/main/java/edu/vt/FacadeBeans/PopularEventFacade.java
--- a/src/main/java/edu/vt/FacadeBeans/PopularEventFacade.java	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/java/edu/vt/FacadeBeans/PopularEventFacade.java	(date 1714528052403)
@@ -4,6 +4,7 @@
  */
 package edu.vt.FacadeBeans;
 
+import edu.vt.EntityBeans.Charity;
 import edu.vt.EntityBeans.PopularEvent;
 import jakarta.ejb.Stateless;
 import jakarta.persistence.EntityManager;
@@ -156,4 +157,27 @@
 //                .getResultList();
 //    }
 
+    public PopularEvent findByName(String eventName)
+    {
+        /*
+        The following @NamedQuery definition is given in Cocktail.java entity class file:
+        @NamedQuery(name = "Cocktail.findByName", query = "SELECT c FROM Cocktail c WHERE c.name = :name")
+         */
+
+        if (entityManager.createNamedQuery("PopularEvent.findByName")
+                .setParameter("title", eventName)
+                .getResultList().isEmpty()) {
+
+            // Return null if no cocktail object exists by the name of cocktail_name
+            return null;
+
+        } else {
+
+            // Return the Object reference of the cocktail object whose name is cocktail_name
+            return (PopularEvent) (entityManager.createNamedQuery("PopularEvent.findByName")
+                    .setParameter("title", eventName)
+                    .getSingleResult());
+        }
+    }
+
 }
Index: src/main/java/edu/vt/controllers/UserEventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/controllers/UserEventController.java b/src/main/java/edu/vt/controllers/UserEventController.java
new file mode 100644
--- /dev/null	(date 1714543718494)
+++ b/src/main/java/edu/vt/controllers/UserEventController.java	(date 1714543718494)
@@ -0,0 +1,338 @@
+/*
+ * Created by Osman Balci and Tim Vadney on 2024.3.18
+ * Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.
+ */
+package edu.vt.controllers;
+
+import edu.vt.EntityBeans.Charity;
+import edu.vt.EntityBeans.PopularEvent;
+import edu.vt.EntityBeans.UserEvent;
+import edu.vt.FacadeBeans.PopularEventFacade;
+import edu.vt.FacadeBeans.UserEventFacade;
+import edu.vt.controllers.util.JsfUtil;
+import edu.vt.controllers.util.JsfUtil.PersistAction;
+import edu.vt.globals.Constants;
+import edu.vt.globals.Methods;
+
+import java.io.Serializable;
+import java.util.Comparator;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import jakarta.ejb.EJB;
+import jakarta.ejb.EJBException;
+import jakarta.inject.Inject;
+import jakarta.inject.Named;
+import jakarta.enterprise.context.SessionScoped;
+
+/*
+---------------------------------------------------------------------------
+The @Named (jakarta.inject.Named) annotation indicates that the objects
+instantiated from this class will be managed by the Contexts and Dependency
+Injection (CDI) container. The name "publicFavoriteController" is used within
+Expression Language (EL) expressions in Jakarta Faces (XHTML) facelets pages to
+access the properties and invoke methods of this class.
+---------------------------------------------------------------------------
+ */
+@Named("userEventController")
+
+/*
+The @SessionScoped annotation preserves the values of the PublicFavoriteController
+object's instance variables across multiple HTTP request-response cycles
+as long as the user's established HTTP session is alive.
+ */
+@SessionScoped
+
+/*
+-----------------------------------------------------------------------------
+Marking the PublicFavoriteController class as "implements Serializable" implies that
+instances of the class can be automatically serialized and deserialized.
+
+Serialization is the process of converting a class instance (object)
+from memory into a suitable format for storage in a file or memory buffer,
+or for transmission across a network connection link.
+
+Deserialization is the process of recreating a class instance (object)
+in memory from the format under which it was stored.
+-----------------------------------------------------------------------------
+ */
+public class UserEventController implements Serializable {
+    /*
+    ===============================
+    Instance Variables (Properties)
+    ===============================
+    */
+
+    /*
+    The @EJB annotation directs the EJB Container Manager to inject (store) the object reference of the
+    PublicFavoriteFacade bean into the instance variable 'publicFavoriteFacade' after it is instantiated at runtime.
+     */
+    @EJB
+    private PopularEventFacade popularEventFacade;
+    @EJB
+    private UserEventFacade userEventFacade;
+
+    @Inject
+    private UserEventController userEventController;
+    @Inject
+    private UserController userController;
+
+    // List of object references of public favoriet objects
+    private List<UserEvent> listOfUserEvents = null;
+
+    // selected = object reference of a selected public favorite object
+    private UserEvent selected;
+
+    // Flag indicating if public favorite data changed or not
+    private Boolean userEventDataChanged;
+
+
+
+
+    /*
+    =========================
+    Getter and Setter Methods
+    =========================
+     */
+    public List<UserEvent> getListOfUserEvents() {
+        if (listOfUserEvents == null) {
+            listOfUserEvents = userEventFacade.findEventsByUserPrimaryKey(userController.getSignedInUser().getId());
+
+            // Sort the List of PublicFavorite objects with respect to nameCommon property in alphabetical order
+            listOfUserEvents.sort(Comparator.comparing(UserEvent::getTitle));
+        }
+        return listOfUserEvents;
+    }
+
+    public PopularEventFacade getPopularEventFacade() {
+        return popularEventFacade;
+    }
+
+    public void setPopularEventFacade(PopularEventFacade popularEventFacade) {
+        this.popularEventFacade = popularEventFacade;
+    }
+
+    public UserController getUserController() {
+        return userController;
+    }
+
+    public void setUserController(UserController userController) {
+        this.userController = userController;
+    }
+
+    public UserEventFacade getUserEventFacade() {
+        return userEventFacade;
+    }
+
+    public void setUserEventFacade(UserEventFacade userEventFacade) {
+        this.userEventFacade = userEventFacade;
+    }
+
+    public UserEventController getUserEventController() {
+        return userEventController;
+    }
+
+    public void setUserEventController(UserEventController userEventController) {
+        this.userEventController = userEventController;
+    }
+
+    public void setListOfUserEvents(List<UserEvent> listOfUserEvents) {
+        this.listOfUserEvents = listOfUserEvents;
+    }
+
+    public UserEvent getSelected() {
+        return selected;
+    }
+
+    public void setSelected(UserEvent selected) {
+        this.selected = selected;
+    }
+
+    public Boolean getUserEventDataChanged() {
+        return userEventDataChanged;
+    }
+
+    public void setUserEventDataChanged(Boolean userEventDataChanged) {
+        this.userEventDataChanged = userEventDataChanged;
+    }
+
+    /*
+     *****************************
+     *   Return Google API Key   *
+     *****************************
+     */
+    public String googleApiKey() {
+        return Constants.GOOGLE_API_KEY;
+    }
+
+    /*
+     ***************************************
+     *   Prepare to Create a New Public Favorite   *
+     ***************************************
+     */
+    public UserEvent prepareCreate() {
+        /*
+        Instantiate a new PublicFavorite object and store its object reference into
+        instance variable 'selected'. The PublicFavorite class is defined in PublicFavorite.java
+         */
+        selected = new UserEvent();
+        return selected;
+    }
+
+
+    /*
+     ********************************************
+     *   CREATE a New Public Favorite in the Database   *
+     ********************************************
+     */
+    public void create() {
+        Methods.preserveMessages();
+        /*
+        An enum is a special Java type used to define a group of constants.
+        The constants CREATE, DELETE and UPDATE are defined as follows in JsfUtil.java
+
+                public enum PersistAction {
+                    CREATE,
+                    DELETE,
+                    UPDATE
+                }
+         */
+
+        /*
+         The object reference of the public favorite to be created is stored in the instance variable 'selected'
+         See the persist method below.
+         */
+        selected.setUserId(userController.getSignedInUser());
+        persist(PersistAction.CREATE, "Successfully signed up for event!");
+
+        if (!JsfUtil.isValidationFailed()) {
+            // No Jakarta Faces validation error. The CREATE operation is successfully performed.
+            selected = null;            // Remove selection
+            listOfUserEvents = null;     // Invalidate listOfPublicFavorites to trigger re-query.
+            userEventDataChanged = true;
+        }
+    }
+
+    /*
+     ***********************************************
+     *   UPDATE Selected Public Favorite in the Database   *
+     ***********************************************
+     */
+    public void update() {
+        Methods.preserveMessages();
+        /*
+         The object reference of the public favorite to be updated is stored in the instance variable 'selected'
+         See the persist method below.
+         */
+        persist(PersistAction.UPDATE, "Public Favorite Business was Successfully Updated!");
+
+        if (!JsfUtil.isValidationFailed()) {
+            // No Jakarta Faces validation error. The UPDATE operation is successfully performed.
+            selected = null;        // Remove selection
+            listOfUserEvents = null; // Invalidate listOfPublicFavorites to trigger re-query.
+            userEventDataChanged = true;
+        }
+    }
+
+    /*
+     *************************************
+     *   Cancel and Display List.xhtml   *
+     *************************************
+     */
+    public String cancel() {
+        // Unselect previously selected movie object if any
+        selected = null;
+        return "/publicFavorite/List?faces-redirect=true";
+    }
+
+    /*
+     ****************************************
+     *   Unselect Selected Public Favorite Object   *
+     ****************************************
+     */
+    public void unselect() {
+        selected = null;
+    }
+
+    /*
+     *************************************************
+     *   DELETE Selected Public Favorite from the Database   *
+     *************************************************
+     */
+    public void destroy() {
+        /*
+         The object reference of the public favorite to be deleted is stored in the instance variable 'selected'
+         See the persist method below.
+         */
+        persist(PersistAction.DELETE, "Public favorite business is Successfully Deleted!");
+
+        if (!JsfUtil.isValidationFailed()) {
+            // No Jakarta Faces validation error. The DELETE operation is successfully performed.
+            selected = null;            // Remove selection
+            listOfUserEvents = null;     // Invalidate list of public favorites to trigger re-query.
+            userEventDataChanged = true;
+        }
+    }
+
+    /*
+     **********************************************************************************************
+     *   Perform CREATE, UPDATE (EDIT), and DELETE (DESTROY, REMOVE) Operations in the Database   *
+     **********************************************************************************************
+     */
+
+    /**
+     * @param persistAction  refers to CREATE, UPDATE (Edit) or DELETE action
+     * @param successMessage displayed to inform the user about the result
+     */
+    private void persist(PersistAction persistAction, String successMessage) {
+        if (selected != null) {
+            try {
+                if (persistAction != PersistAction.DELETE) {
+                    /*
+                     -------------------------------------------------
+                     Perform CREATE or EDIT operation in the database.
+                     -------------------------------------------------
+                     The edit(selected) method performs the SAVE (STORE) operation of the "selected"
+                     object in the database regardless of whether the object is a newly
+                     created object (CREATE) or an edited (updated) object (EDIT or UPDATE).
+
+                     PublicFavoriteFacade inherits the edit(selected) method from the AbstractFacade class.
+                     */
+                    userEventFacade.edit(selected);
+                } else {
+                    /*
+                     -----------------------------------------
+                     Perform DELETE operation in the database.
+                     -----------------------------------------
+                     The remove(selected) method performs the DELETE operation of the "selected"
+                     object in the database.
+
+                     PublicFavoriteFacade inherits the remove(selected) method from the AbstractFacade class.
+                     */
+                    userEventFacade.remove(selected);
+                }
+                JsfUtil.addSuccessMessage(successMessage);
+            } catch (EJBException ex) {
+                String msg = "";
+                Throwable cause = ex.getCause();
+                if (cause != null) {
+                    msg = cause.getLocalizedMessage();
+                }
+                if (msg.length() > 0) {
+                    JsfUtil.addErrorMessage(msg);
+                } else {
+                    JsfUtil.addErrorMessage(ex, "A persistence error occurred!");
+                }
+            } catch (Exception ex) {
+                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
+                JsfUtil.addErrorMessage(ex, "A persistence error occurred");
+            }
+        }
+    }
+
+
+
+
+
+}
Index: src/main/java/edu/vt/FacadeBeans/UserEventFacade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/FacadeBeans/UserEventFacade.java b/src/main/java/edu/vt/FacadeBeans/UserEventFacade.java
new file mode 100644
--- /dev/null	(date 1714542843000)
+++ b/src/main/java/edu/vt/FacadeBeans/UserEventFacade.java	(date 1714542843000)
@@ -0,0 +1,81 @@
+/*
+ * Created by Osman Balci and Tim Vadney on 2024.3.30
+ * Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.
+ */
+package edu.vt.FacadeBeans;
+
+import edu.vt.EntityBeans.Charity;
+import edu.vt.EntityBeans.PopularEvent;
+import edu.vt.EntityBeans.UserEvent;
+import jakarta.ejb.Stateless;
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.PersistenceContext;
+
+import java.util.List;
+
+// @Stateless annotation implies that the conversational state with the client shall NOT be maintained.
+@Stateless
+public class UserEventFacade extends AbstractFacade<UserEvent> {
+    /*
+    ---------------------------------------------------------------------------------------------
+    The EntityManager is an API that enables database CRUD (Create Read Update Delete) operations
+    and complex database searches. An EntityManager instance is created to manage entities
+    that are defined by a persistence unit. The @PersistenceContext annotation below associates
+    the entityManager instance with the persistence unitName identified below.
+    ---------------------------------------------------------------------------------------------
+     */
+    @PersistenceContext(unitName = "VolunteerMarketplacePU")
+    private EntityManager entityManager;
+
+    // Obtain the object reference of the EntityManager instance in charge of
+    // managing the entities in the persistence context identified above.
+    @Override
+    protected EntityManager getEntityManager() {
+        return entityManager;
+    }
+
+    /*
+    This constructor method invokes its parent AbstractFacade's constructor method,
+    which in turn initializes its entity class type T and entityClass instance variable.
+     */
+    public UserEventFacade() {
+        super(UserEvent.class);
+    }
+
+    public UserEvent findByName(String eventName)
+    {
+        /*
+        The following @NamedQuery definition is given in Cocktail.java entity class file:
+        @NamedQuery(name = "Cocktail.findByName", query = "SELECT c FROM Cocktail c WHERE c.name = :name")
+         */
+
+        if (entityManager.createNamedQuery("UserEvent.findByName")
+                .setParameter("title", eventName)
+                .getResultList().isEmpty()) {
+
+            // Return null if no cocktail object exists by the name of cocktail_name
+            return null;
+
+        } else {
+
+            // Return the Object reference of the cocktail object whose name is cocktail_name
+            return (UserEvent) (entityManager.createNamedQuery("UserEvent.findByName")
+                    .setParameter("title", eventName)
+                    .getSingleResult());
+        }
+    }
+
+    public List<UserEvent> findEventsByUserPrimaryKey(Integer userPrimaryKey) {
+        /*
+        The following @NamedQuery definition is given in UserFile entity class file:
+        @NamedQuery(name = "UserFile.findUserFilesByUserId", query = "SELECT u FROM UserFile u WHERE u.userId.id = :userId")
+
+        The following statement obtains the results from the named database query.
+         */
+        return getEntityManager().createQuery(
+                        "SELECT i FROM UserEvent i WHERE i.userId.id = :userPrimaryKey")
+                .setParameter("userPrimaryKey", userPrimaryKey)
+                .getResultList();
+    }
+
+}
Index: src/main/webapp/popularEvents/Edit.xhtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!--\r\n  - Created by Osman Balci and Tim Vadney on 2024.3.12\r\n  - Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.\r\n  -->\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n      xmlns:ui=\"jakarta.faces.facelets\"\r\n      xmlns:h=\"jakarta.faces.html\"\r\n      xmlns:p=\"http://primefaces.org/ui\">\r\n\r\n<ui:composition>\r\n    <!--\r\n    ===================================================================\r\n    |  Clicking the CREATE button in List.xhtml displays this Dialog  |\r\n    |  window for the user to enter the data to create a new movie star. |\r\n    ===================================================================\r\n    -->\r\n    <p:dialog id=\"EventEditDlg\" header=\"Edit #{popularEventController.selected.title}\" widgetVar=\"EventEditDialog\"\r\n              modal=\"true\" position=\"center\" appendTo=\"@(body)\" width=\"70%\" height=\"400\"\r\n              showEffect=\"slide\" hideEffect=\"fade\" responsive=\"true\">\r\n        <!--\r\n        Various effect options can be used when showing and closing the dialog.\r\n        Use showEffect and hideEffect options to apply these effects:\r\n            blind, bounce, clip, drop, explode, fade, fold, highlight, puff,\r\n            pulsate, scale, shake, size, slide and transfer. [PrimeFaces Documentation]\r\n        -->\r\n\r\n        <!-- class=\"ui-datatable-data\" in siteStyles reduces row paddings -->\r\n        <h:form id=\"EventEditForm\" class=\"ui-datatable-data\">\r\n            <h:panelGroup id=\"display\">\r\n                <!--\r\n                When the user clicks the CREATE button in List.xhtml, actionListener=\"#{movieStarController.prepareCreate()}\"\r\n                executes the prepareCreate method in which a new MovieStar object is instantiated and its object reference\r\n                is stored in the \"selected\" instance variable. Thus, \"selected\" points to a newly created MovieStar object\r\n                with property (instance variable) values set to empty or null or 0. The inputText data fields below are\r\n                intended to assign user-provided values to the properties of the newly created MovieStar object.\r\n                -->\r\n                <table border=\"0\" align=\"center\" cellpadding=\"5\" cellspacing=\"0\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <!-- Event Name -->\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Event Name:\" for=\"name\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"name\" value=\"#{popularEventController.selected.title}\" style=\"width:100%\"\r\n                                         required=\"true\" requiredMessage=\"Event Name is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Organization -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Event Organization:\" for=\"organization\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"organization\" value=\"#{popularEventController.selected.organization}\" style=\"width:100%\"\r\n                                         required=\"true\" requiredMessage=\"Event Organization is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Logo URL -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Logo URL:\" for=\"photoUrl\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"photoUrl\" value=\"#{popularEventController.selected.imageUrl}\" style=\"width:100%\"\r\n                                         required=\"true\" requiredMessage=\"Logo Photo URL is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Website URL -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Website URL:\" for=\"websiteUrl\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"websiteUrl\" value=\"#{popularEventController.selected.websiteUrl}\" style=\"width:100%\"\r\n                                         required=\"true\" requiredMessage=\"Website URL is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Description -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Event Description:\" for=\"description\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"description\" value=\"#{popularEventController.selected.description}\" style=\"width:100%\"\r\n                                         required=\"true\" requiredMessage=\"Event Description is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Date -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Event Date:\" for=\"date\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <!--\r\n                            Date is stored in the database in the format YYYY-MM-DD so that it is sortable.\r\n                            However, we ask the user to enter the date as MM/DD/YYYY since it is the familiar format.\r\n                            -->\r\n                            <p:calendar id=\"date\" pattern=\"MM/dd/yyyy\" mask=\"true\"\r\n                                        value=\"#{popularEventController.selected.date}\"\r\n                                        required=\"true\" requiredMessage=\"Event Date is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Address 1 -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Address 1:\" for=\"address1\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"address1\" value=\"#{popularEventController.selected.address1}\"\r\n                                         required=\"true\" requiredMessage=\"Event Address 1 is Required!\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Address 2 -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Address 2:\" for=\"address2\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"address2\" value=\"#{popularEventController.selected.address2}\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event City -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"City:\" for=\"city\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"city\" value=\"#{popularEventController.selected.city}\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event State -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"State:\" for=\"state\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"state\" value=\"#{popularEventController.selected.state}\"/>\r\n                        </td>\r\n                    </tr>\r\n                    <!-- Event Zip Code -->\r\n                    <tr>\r\n                        <td align=\"right\" valign=\"middle\" nowrap=\"nowrap\" bgcolor=\"papayawhip\">\r\n                            <p:outputLabel value=\"Zip Code:\" for=\"zipCode\"/>\r\n                        </td>\r\n                        <td align=\"left\" valign=\"middle\" bgcolor=\"oldlace\" width=\"100%\">\r\n                            <p:inputText id=\"zipCode\" value=\"#{popularEventController.selected.zipCode}\"/>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </h:panelGroup>\r\n\r\n            <h:panelGroup>\r\n                <br/>\r\n                <div align=\"center\">\r\n                    <!-- SAVE button -->\r\n                    <p:commandButton value=\"Save\" icon=\"fas fa-save\" styleClass=\"rounded-button\"\r\n                                     ajax=\"false\" actionListener=\"#{popularEventController.create()}\"\r\n                                     update=\"display,:MovieStarListForm:datalist,:growlInfoMessage,:growlWarningMessage,:growlErrorMessage,:growlFatalMessage\"\r\n                                     oncomplete=\"handleSubmit(args,'EventCreateDialog');\"/>\r\n                    &nbsp;\r\n                    <!--\r\n                    CANCEL button: Call the cancel() method immediately without first rendering this Jakarta Faces page.\r\n                    The cancel() method will make the selected movie star object null and show the List page.\r\n                    -->\r\n                    <p:commandButton value=\"Cancel\" icon=\"fas fa-ban\" styleClass=\"ui-button-outlined\"\r\n                                     action=\"#{popularEventController.cancel()}\" ajax=\"false\" immediate=\"true\"\r\n                                     onclick=\"PF('EventCreateDialog').hide()\"/>\r\n                </div>\r\n            </h:panelGroup>\r\n        </h:form>\r\n    </p:dialog>\r\n</ui:composition>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/popularEvents/Edit.xhtml b/src/main/webapp/popularEvents/Edit.xhtml
--- a/src/main/webapp/popularEvents/Edit.xhtml	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/webapp/popularEvents/Edit.xhtml	(date 1714519620157)
@@ -159,17 +159,16 @@
                 <div align="center">
                     <!-- SAVE button -->
                     <p:commandButton value="Save" icon="fas fa-save" styleClass="rounded-button"
-                                     ajax="false" actionListener="#{popularEventController.create()}"
-                                     update="display,:MovieStarListForm:datalist,:growlInfoMessage,:growlWarningMessage,:growlErrorMessage,:growlFatalMessage"
-                                     oncomplete="handleSubmit(args,'EventCreateDialog');"/>
+                                     ajax="false" actionListener="#{popularEventController.update()}"
+                                     update="display,:PopularEventsListForm:datalist,:growlInfoMessage,:growlWarningMessage,:growlErrorMessage,:growlFatalMessage"
+                                     oncomplete="handleSubmit(args, 'EventEditDialog');"/>
                     &nbsp;
                     <!--
                     CANCEL button: Call the cancel() method immediately without first rendering this Jakarta Faces page.
                     The cancel() method will make the selected movie star object null and show the List page.
                     -->
                     <p:commandButton value="Cancel" icon="fas fa-ban" styleClass="ui-button-outlined"
-                                     action="#{popularEventController.cancel()}" ajax="false" immediate="true"
-                                     onclick="PF('EventCreateDialog').hide()"/>
+                                     immediate="true" onclick="PF('EventEditDialog').hide()" />
                 </div>
             </h:panelGroup>
         </h:form>
Index: src/main/webapp/popularEvents/CheckSignUp.xhtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/popularEvents/CheckSignUp.xhtml b/src/main/webapp/popularEvents/CheckSignUp.xhtml
new file mode 100644
--- /dev/null	(date 1714526075587)
+++ b/src/main/webapp/popularEvents/CheckSignUp.xhtml	(date 1714526075587)
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!--
+  - Created by Osman Balci and Tim Vadney on 2024.4.24
+  - Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.
+  -->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:ui="jakarta.faces.facelets"
+      xmlns:h="jakarta.faces.html"
+      xmlns:p="http://primefaces.org/ui"
+      xmlns:f="jakarta.faces.core">
+
+<ui:composition>
+    <!--
+    =======================================================================
+    |  Selecting the API SEARCH menu option displays this Dialog window   |
+    |  for the user to search for a country.                              |
+    =======================================================================
+    -->
+    <p:dialog id="CharityCheckDonateDlg" header="Donation Confirmation" widgetVar="CharityCheckDonateDialog"
+              modal="true" position="center" appendTo="@(body)"
+              showEffect="slide" hideEffect="fade" responsive="true" >
+
+        <h:form id="CharityCheckDonateForm">
+            <p:panel>
+                <h:panelGroup>
+                    <div align="center">
+                        <br/>
+                        <p:outputLabel value="Did you donate to #{charityApiController.selected.name}?"/>
+                        <br/><br/>
+
+                        <!--  SEARCH button:
+                        Clicking the Search button invokes the performSearch() method of the
+                        searchedMovieController CDI @Named bean. The performSearch() method executes
+                        the search for the searchQuery property value and at the end of the execution with
+
+                            return "MovieSearchResults?faces-redirect=true";
+
+                        it returns "MovieSearchResults" as the name of the XHTML file to display.
+                        -->
+                        <p:commandButton id="yesButton" value="Yes" icon="fa solid fa-check" styleClass="rounded-button" style="background-color: green"
+                                         ajax="false" onclick="PF('EventCheckSignUpDialog').hide(); PF('EventSignUpDialog').show()"
+                                         update=":EventSignUpForm" type="button"/>
+                        &nbsp;&nbsp;
+
+                        <!-- CANCEL button -->
+                        <p:commandButton value="No" icon="fas fa-ban" styleClass="ui-button-outlined"
+                                         immediate="true" onclick="PF('EventCheckSignUpDialog').hide()"/>
+
+                        <br/><br/>
+                    </div>
+                </h:panelGroup>
+                <br/><br/>
+            </p:panel>
+        </h:form>
+    </p:dialog>
+    <ui:include src="/apiSearch/Donate.xhtml"/>
+</ui:composition>
+</html>
\ No newline at end of file
Index: src/main/webapp/popularEvents/List.xhtml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!--\r\n  - Created by Osman Balci on 2024.2.8\r\n  - Copyright Â© 2024 Osman Balci. All rights reserved.\r\n  -->\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\r\n      xmlns:ui=\"jakarta.faces.facelets\"\r\n      xmlns:h=\"jakarta.faces.html\"\r\n      xmlns:f=\"jakarta.faces.core\"\r\n      xmlns:p=\"http://primefaces.org/ui\"\r\n      xmlns:c=\"jakarta.tags.core\">\r\n\r\n<!-- This page is constructed based on the siteTemplate -->\r\n<ui:composition template=\"/template/siteTemplate.xhtml\">\r\n    <ui:define name=\"title\">\r\n        <!-- Set the page title -->\r\n        <h:outputText value=\"Popular Events\"/>\r\n    </ui:define>\r\n\r\n    <!-- Create the content for this page below -->\r\n    <ui:define name=\"editableContent\">\r\n\r\n        <!-- In case of Jakarta Faces validation error, set 'selected' to null in countryApiController -->\r\n        <c:if test=\"#{facesContext.validationFailed}\">\r\n            ${popularEventController.unselect()}\r\n        </c:if>\r\n\r\n        <!-- Set 'selected' to null in countryApiController when the user refreshes / reloads this Jakarta Faces page -->\r\n        <f:metadata>\r\n            <f:viewAction action=\"#{popularEventController.unselect()}\" rendered=\"#{facesContext.postback}\"/>\r\n        </f:metadata>\r\n\r\n        <div align=\"center\">\r\n            <h:form id=\"PopularEventsListForm\">\r\n                <p:panel header=\"Popular Events\">\r\n                    <p:dataTable id=\"datalist\"\r\n                                 value=\"#{popularEventController.listOfPopularEvents}\"\r\n                                 var=\"aEvent\"\r\n                                 widgetVar=\"popularEventsDataTable\"\r\n                                 selectionMode=\"single\"\r\n                                 selection=\"#{popularEventController.selected}\"\r\n                                 reflow=\"true\"\r\n                                 showGridlines=\"true\"\r\n                                 paginator=\"true\"\r\n                                 rowKey=\"#{aEvent.id}\"\r\n                                 rows=\"5\"\r\n                                 rowsPerPageTemplate=\"5,10,20,30,50,70,90\">\r\n\r\n                        <p:ajax event=\"rowSelect\" update=\"createButton viewButton deleteButton\"/>\r\n                        <p:ajax event=\"rowUnselect\" update=\"createButton viewButton deleteButton\"/>\r\n\r\n                        <!--\r\n                        *********************\r\n                        *    Event Logo   *\r\n                        *********************\r\n                        Country code must be in lower case for the flag URL\r\n                        -->\r\n                        <p:column headerText=\"Logo\" style=\"width: 60px; text-align: center; vertical-align: top\">\r\n                            <img src=\"#{aEvent.imageUrl}\"\r\n                                 alt=\"Event Logo\" width=\"60px\" height=\"60px\"/>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        *********************\r\n                        *    Event Organization   *\r\n                        *********************\r\n                        -->\r\n                        <p:column headerText=\"Organization\" sortBy=\"#{aEvent.organization}\"\r\n                                  style=\"vertical-align: top; width: 200px;\">\r\n                            <h:outputText value=\"#{aEvent.organization}\"/>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        *********************\r\n                        *    Event Name   *\r\n                        *********************\r\n                        -->\r\n                        <p:column headerText=\"Event Name\" sortBy=\"#{aEvent.title}\"\r\n                                  style=\"vertical-align: top; width: 200px;\">\r\n                            <h:outputText value=\"#{aEvent.title}\"/>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        ******************************\r\n                        *    Event Description   *\r\n                        ******************************\r\n                        -->\r\n                        <p:column headerText=\"Description\" sortBy=\"#{aEvent.description}\"\r\n                                  style=\"vertical-align: top\">\r\n                            <h:outputText value=\"#{aEvent.description}\"/>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        *********************\r\n                        *  Event Location *\r\n                        *********************\r\n                        -->\r\n                        <p:column headerText=\"Based in\" sortBy=\"#{aEvent.location}\"\r\n                                  style=\"vertical-align: top; text-align: center; width: 150px\">\r\n                            <h:outputText value=\"#{aEvent.location}\"/>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        *********************\r\n                        *  Event Date  *\r\n                        *********************\r\n                        -->\r\n                        <p:column headerText=\"Based in\" sortBy=\"#{aEvent.date}\"\r\n                                  style=\"vertical-align: top; text-align: center; width: 150px\">\r\n                            <h:outputText value=\"#{aEvent.date}\">\r\n                                <f:convertDateTime pattern=\"MM/dd/yyyy\" />\r\n                            </h:outputText>\r\n                        </p:column>\r\n\r\n                        <!--\r\n                        *************************\r\n                        *   Data Table Footer   *\r\n                        *************************\r\n                        -->\r\n                        <f:facet name=\"footer\">\r\n                            <div align=\"center\">\r\n                                <!-- CREATE button: id is used since it is referenced to be activated or deactivated -->\r\n                                <p:commandButton id=\"createButton\" value=\"Create\" icon=\"fas fa-plus\" styleClass=\"rounded-button\"\r\n                                                 actionListener=\"#{popularEventController.prepareCreate()}\"\r\n                                                 update=\":EventCreateForm\" oncomplete=\"PF('EventCreateDialog').show()\"/>\r\n                                &nbsp;\r\n                                <!-- VIEW button: id is used since it is referenced to be activated or deactivated -->\r\n                                <p:commandButton id=\"viewButton\" value=\"View\" icon=\"fas fa-eye\" styleClass=\"rounded-button\"\r\n                                                 update=\":EventViewDlg\" oncomplete=\"PF('EventViewDialog').show()\"\r\n                                                 disabled=\"#{empty popularEventController.selected}\"/>\r\n                                &nbsp;\r\n                                <!-- ***************************************************\r\n                                Display a Confirmation dialog for the DELETE button\r\n                                id is used since it is referenced to be activated or not\r\n                                **************************************************** -->\r\n                                <p:commandButton id=\"deleteButton\" value=\"Delete\" icon=\"fas fa-trash-alt\"  styleClass=\"rounded-button\"\r\n                                                 actionListener=\"#{popularEventController.destroy()}\"\r\n                                                 update=\"datalist,:growlInfoMessage,:growlWarningMessage,:growlErrorMessage,:growlFatalMessage\"\r\n                                                 disabled=\"#{empty popularEventController.selected}\">\r\n\r\n                                    <p:confirm header=\"Deletion Confirmation\"\r\n                                               message=\"Are you sure you want to permanently delete the selected event #{popularEventController.selected.title} from the database?\"/>\r\n                                </p:commandButton>\r\n\r\n                                <p:confirmDialog id=\"confirmDialogBox\" global=\"true\" showEffect=\"fade\" hideEffect=\"fade\" responsive=\"true\" width=\"350\">\r\n                                    <div align=\"center\">\r\n                                        <p:commandButton value=\"No\" type=\"button\" styleClass=\"ui-confirmdialog-no\" icon=\"fas fa-window-close\" />\r\n                                        &nbsp;\r\n                                        <p:commandButton value=\"Yes\" type=\"button\" class=\"ui-confirmdialog-yes ui-button-danger\" icon=\"fas fa-check-square\" />\r\n                                    </div>\r\n                                </p:confirmDialog>\r\n                            </div>\r\n                        </f:facet>\r\n                    </p:dataTable>\r\n                </p:panel>\r\n            </h:form>\r\n        </div>\r\n        <!-- Clicking the Create button displays the included Create.xhtml file in a dialog window on top of this page. -->\r\n        <ui:include src=\"/popularEvents/Create.xhtml\"/>\r\n\r\n        <!-- Clicking the View button displays the included View.xhtml file in a dialog window on top of this page. -->\r\n        <ui:include src=\"/popularEvents/View.xhtml\"/>\r\n    </ui:define>\r\n</ui:composition>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/popularEvents/List.xhtml b/src/main/webapp/popularEvents/List.xhtml
--- a/src/main/webapp/popularEvents/List.xhtml	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/webapp/popularEvents/List.xhtml	(date 1714526614011)
@@ -33,6 +33,9 @@
         </f:metadata>
 
         <div align="center">
+            <c:if test="#{userController.userIsSignedIn() == false}">
+                <h1 style="font-size: 30px; font-style: oblique">To sign up to volunteer, please create an account or sign in!</h1>
+            </c:if>
             <h:form id="PopularEventsListForm">
                 <p:panel header="Popular Events">
                     <p:dataTable id="datalist"
@@ -48,8 +51,8 @@
                                  rows="5"
                                  rowsPerPageTemplate="5,10,20,30,50,70,90">
 
-                        <p:ajax event="rowSelect" update="createButton viewButton deleteButton"/>
-                        <p:ajax event="rowUnselect" update="createButton viewButton deleteButton"/>
+                        <p:ajax event="rowSelect" update="createButton viewButton editButton deleteButton"/>
+                        <p:ajax event="rowUnselect" update="createButton viewButton editButton deleteButton"/>
 
                         <!--
                         *********************
@@ -97,7 +100,7 @@
                         *  Event Location *
                         *********************
                         -->
-                        <p:column headerText="Based in" sortBy="#{aEvent.location}"
+                        <p:column headerText="Location" sortBy="#{aEvent.location}"
                                   style="vertical-align: top; text-align: center; width: 150px">
                             <h:outputText value="#{aEvent.location}"/>
                         </p:column>
@@ -107,7 +110,7 @@
                         *  Event Date  *
                         *********************
                         -->
-                        <p:column headerText="Based in" sortBy="#{aEvent.date}"
+                        <p:column headerText="Date" sortBy="#{aEvent.date}"
                                   style="vertical-align: top; text-align: center; width: 150px">
                             <h:outputText value="#{aEvent.date}">
                                 <f:convertDateTime pattern="MM/dd/yyyy" />
@@ -129,6 +132,11 @@
                                 <!-- VIEW button: id is used since it is referenced to be activated or deactivated -->
                                 <p:commandButton id="viewButton" value="View" icon="fas fa-eye" styleClass="rounded-button"
                                                  update=":EventViewDlg" oncomplete="PF('EventViewDialog').show()"
+                                                 disabled="#{empty popularEventController.selected}"/>
+                                &nbsp;
+                                <!-- EDIT button: id is used since it is referenced to be activated or deactivated -->
+                                <p:commandButton id="editButton" value="Edit" icon="fas fa-edit" styleClass="rounded-button"
+                                                 update=":EventEditDlg" oncomplete="PF('EventEditDialog').show()"
                                                  disabled="#{empty popularEventController.selected}"/>
                                 &nbsp;
                                 <!-- ***************************************************
@@ -151,6 +159,25 @@
                                         <p:commandButton value="Yes" type="button" class="ui-confirmdialog-yes ui-button-danger" icon="fas fa-check-square" />
                                     </div>
                                 </p:confirmDialog>
+                                &nbsp;
+                                <!-- SIGN UP button: id is used since it is referenced to be activated or deactivated -->
+                                <p:commandButton id="signUpButton" value="Sign Up" icon="fa-regular fa-pen-to-square" styleClass="rounded-button"
+                                                 onclick="window.open('#{popularEventController.selected.websiteUrl}', '_blank');"
+                                                 actionListener="#{popularEventController.addToFavorites()}"
+                                                 disabled="#{empty popularEventController.selected || !userController.userIsSignedIn()}">
+
+                                    <p:confirm header="Sign Up Confirmation"
+                                               message="Did you sign up for #{popularEventController.selected.title}?"/>
+                                </p:commandButton>
+
+                                <p:confirmDialog id="confirmSignUpBox" global="true" showEffect="fade" hideEffect="fade" responsive="true" width="350">
+                                    <div align="center">
+                                        <p:commandButton value="No" type="button" styleClass="ui-confirmdialog-no" icon="fas fa-window-close" />
+                                        &nbsp;
+                                        <p:commandButton value="Yes" type="button" class="ui-confirmdialog-yes ui-button-danger" icon="fas fa-check-square" />
+                                    </div>
+                                </p:confirmDialog>
+
                             </div>
                         </f:facet>
                     </p:dataTable>
@@ -162,6 +189,9 @@
 
         <!-- Clicking the View button displays the included View.xhtml file in a dialog window on top of this page. -->
         <ui:include src="/popularEvents/View.xhtml"/>
+
+        <!-- Clicking the EDit button displays the included Edit.xhtml file in a dialog window on top of this page. -->
+        <ui:include src="/popularEvents/Edit.xhtml"/>
     </ui:define>
 </ui:composition>
 </html>
Index: src/main/java/edu/vt/FacadeBeans/CharityFacade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Created by Osman Balci and Tim Vadney on 2024.3.18\r\n * Copyright Â© 2024 Osman Balci and Tim Vadney. All rights reserved.\r\n*/\r\npackage edu.vt.FacadeBeans;\r\n\r\nimport edu.vt.EntityBeans.Charity;\r\nimport edu.vt.FacadeBeans.AbstractFacade;\r\nimport jakarta.ejb.Stateless;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.PersistenceContext;\r\n\r\nimport java.util.List;\r\n\r\n// @Stateless annotation implies that the conversational state with the client shall NOT be maintained.\r\n@Stateless\r\npublic class CharityFacade extends AbstractFacade<Charity> {\r\n    /*\r\n    ---------------------------------------------------------------------------------------------\r\n    The EntityManager is an API that enables database CRUD (Create Read Update Delete) operations\r\n    and complex database searches. An EntityManager instance is created to manage entities\r\n    that are defined by a persistence unit. The @PersistenceContext annotation below associates\r\n    the entityManager instance with the persistence unitName identified below.\r\n    ---------------------------------------------------------------------------------------------\r\n     */\r\n    @PersistenceContext(unitName = \"VolunteerMarketplacePU\")\r\n    private EntityManager entityManager;\r\n\r\n    // Obtain the object reference of the EntityManager instance in charge of\r\n    // managing the entities in the persistence context identified above.\r\n    @Override\r\n    protected EntityManager getEntityManager() {\r\n        return entityManager;\r\n    }\r\n\r\n    /*\r\n    This constructor method invokes its parent AbstractFacade's constructor method,\r\n    which in turn initializes its entity class type T and entityClass instance variable.\r\n     */\r\n    public CharityFacade() {\r\n        super(Charity.class);\r\n    }\r\n    /*\r\n     *********************\r\n     *   Other Methods   *\r\n     *********************\r\n     */\r\n\r\n    // Returns the object reference of the Cocktail object whose name is cocktail_name\r\n    public Charity findByCharityName(String cocktail_title) {\r\n        /*\r\n        The following @NamedQuery definition is given in Cocktail.java entity class file:\r\n        @NamedQuery(name = \"Cocktail.findByName\", query = \"SELECT c FROM Cocktail c WHERE c.name = :name\")\r\n         */\r\n\r\n        if (entityManager.createNamedQuery(\"Charity.findByTitle\")\r\n                .setParameter(\"title\", cocktail_title)\r\n                .getResultList().isEmpty()) {\r\n\r\n            // Return null if no cocktail object exists by the name of cocktail_name\r\n            return null;\r\n\r\n        } else {\r\n\r\n            // Return the Object reference of the cocktail object whose name is cocktail_name\r\n            return (Charity) (entityManager.createNamedQuery(\"Charity.findByTitle\")\r\n                    .setParameter(\"title\", cocktail_title)\r\n                    .getSingleResult());\r\n        }\r\n    }\r\n\r\n    public List<Charity> findCharitiesByUserPrimaryKey(Integer userPrimaryKey) {\r\n        /*\r\n        The following @NamedQuery definition is given in UserFile entity class file:\r\n        @NamedQuery(name = \"UserFile.findUserFilesByUserId\", query = \"SELECT u FROM UserFile u WHERE u.userId.id = :userId\")\r\n\r\n        The following statement obtains the results from the named database query.\r\n         */\r\n        return getEntityManager().createQuery(\r\n                        \"SELECT i FROM Charity i WHERE i.userId.id = :userPrimaryKey\")\r\n                .setParameter(\"userPrimaryKey\", userPrimaryKey)\r\n                .getResultList();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/vt/FacadeBeans/CharityFacade.java b/src/main/java/edu/vt/FacadeBeans/CharityFacade.java
--- a/src/main/java/edu/vt/FacadeBeans/CharityFacade.java	(revision cb4866e62964f4eade5c5f09594507c46306a8bc)
+++ b/src/main/java/edu/vt/FacadeBeans/CharityFacade.java	(date 1714527982073)
@@ -47,14 +47,14 @@
      */
 
     // Returns the object reference of the Cocktail object whose name is cocktail_name
-    public Charity findByCharityName(String cocktail_title) {
+    public Charity findByCharityName(String charity_title) {
         /*
         The following @NamedQuery definition is given in Cocktail.java entity class file:
         @NamedQuery(name = "Cocktail.findByName", query = "SELECT c FROM Cocktail c WHERE c.name = :name")
          */
 
         if (entityManager.createNamedQuery("Charity.findByTitle")
-                .setParameter("title", cocktail_title)
+                .setParameter("title", charity_title)
                 .getResultList().isEmpty()) {
 
             // Return null if no cocktail object exists by the name of cocktail_name
@@ -64,7 +64,7 @@
 
             // Return the Object reference of the cocktail object whose name is cocktail_name
             return (Charity) (entityManager.createNamedQuery("Charity.findByTitle")
-                    .setParameter("title", cocktail_title)
+                    .setParameter("title", charity_title)
                     .getSingleResult());
         }
     }
diff --git a/src/main/webapp/popularEvents/SignUp.xhtml b/src/main/webapp/popularEvents/SignUp.xhtml
new file mode 100644
